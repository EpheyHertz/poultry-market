// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SELLER
  COMPANY
  STAKEHOLDER
  ADMIN
  DELIVERY_AGENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  DISPATCHED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REJECTED
}

enum ProductType {
  EGGS
  CHICKEN_MEAT
  CHICKEN_FEED
  CHICKS
  HATCHING_EGGS
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TagType {
  VERIFIED
  TRUSTED
  RECOMMENDED
  PREMIUM
  FEATURED
  ORGANIC
  LOCAL
  BESTSELLER
  DISCOUNTED
  NEW_ARRIVAL
  LIMITED_STOCK
}

enum PaymentMethod {
  MPESA
  CASH_ON_DELIVERY
  GOOGLE_PAY
  BANK_TRANSFER
}

enum PaymentType {
  BEFORE_DELIVERY
  AFTER_DELIVERY
}

enum PaymentStatus {
  UNPAID
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  REFUNDED
}

enum SponsorshipStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  EXPIRED
}

enum SponsorshipApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum AnnouncementType {
  SALE
  DISCOUNT
  SLAUGHTER_SCHEDULE
  PRODUCT_LAUNCH
  GENERAL
  URGENT
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  EXPIRED
  ARCHIVED
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum VoucherType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  googleId  String?  @unique
  name      String
  phone     String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  verificationToken String?
  verificationTokenExpiry DateTime?
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  bio         String?
  location    String?
  website     String?

  // Custom domain/dashboard
  customDomain     String?
  dashboardSlug    String?
  qrCode          String?

  // Delivery Agent specific fields
  agentId         String?   @unique
  vehicleType     String?
  vehicleNumber   String?
  licenseNumber   String?
  coverageArea    String?
  isApproved      Boolean   @default(false)

  // Customer relationships
  orders          Order[]
  hatchingRequests HatchingRequest[]
  applications    Application[]
  reviews         Review[]
  reviewLikes     ReviewLike[]
  payments        Payment[]

  // Seller/Company relationships
  products         Product[]
  vouchers         Voucher[]
  sponsorships     Sponsorship[] @relation("UserSponsorships")
  receivedSponsorships Sponsorship[] @relation("SponsorshipReceiver")
  companySponsorships   Sponsorship[] @relation("CompanySponsorships")
  sellerSponsorships    Sponsorship[] @relation("SellerSponsorships")
  sponsorshipApplications SponsorshipApplication[] @relation("SellerSponsorshipApplications")
  tags             UserTag[]
  analytics        Analytics[]
  reviewReplies    ReviewReply[]

  // Delivery Agent relationships
  deliveries       Delivery[]

  // Payment approvals
  paymentApprovals PaymentApprovalLog[]

  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  // Product interactions
  productLikes          ProductLike[]
  cartItems             CartItem[]

  // Chat relationships
  sentMessages          ChatMessage[] @relation("SentMessages")
  chatsAsParticipant1   Chat[] @relation("ChatParticipant1")
  chatsAsParticipant2   Chat[] @relation("ChatParticipant2")

  // Follow relationships
  followers             Follow[] @relation("Followers")
  following             Follow[] @relation("Following")

  // Delivery photo uploads
  uploadedDeliveryPhotos DeliveryPhoto[]

  // Announcements
  announcements         Announcement[]
  announcementViews     AnnouncementView[]
  announcementReactions AnnouncementReaction[]

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  type        ProductType
  images      String[]
  sellerId    String
  seller      User        @relation(fields: [sellerId], references: [id])
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // SEO and metadata
  slug        String?     @unique
  metaTitle   String?
  metaDescription String?

  // Discount fields
  hasDiscount     Boolean   @default(false)
  discountType    DiscountType?
  discountAmount  Float?
  discountStartDate DateTime?
  discountEndDate   DateTime?

  orderItems OrderItem[]
  reviews    Review[]
  tags       ProductTag[]
  likes      ProductLike[]
  cartItems  CartItem[]
  categories ProductCategory[]
  collections ProductCollection[]
  chats      Chat[]
  announcements Announcement[]

  @@map("products")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       TagType
  addedAt   DateTime @default(now())

  @@unique([productId, tag])
  @@map("product_tags")
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  customer   User        @relation(fields: [customerId], references: [id])
  status     OrderStatus @default(PENDING)
  total      Float
  subtotal   Float @default(0)
  discountAmount Float   @default(0)
  deliveryFee Float   @default(0)
  voucherCode    String?
  notes      String?
  rejectionReason String?

  // Enhanced payment fields
  paymentType    PaymentType   @default(BEFORE_DELIVERY)
  paymentStatus  PaymentStatus @default(UNPAID)
  paymentDetails String?
  paymentPhone   String?
  paymentReference String?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  items      OrderItem[]
  delivery   Delivery?
  payment    Payment?
  notifications Notification[]
  paymentApprovals PaymentApprovalLog[]
  chats      Chat[]
  invoice    Invoice?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  discountApplied Float @default(0)

  @@map("order_items")
}

model Delivery {
  id         String        @id @default(cuid())
  orderId    String        @unique
  order      Order         @relation(fields: [orderId], references: [id])
  fee        Float         @default(0)
  agentId    String?
  agent      User?         @relation(fields: [agentId], references: [id])
  address    String
  trackingId String        @unique
  status     DeliveryStatus @default(ASSIGNED)

  // Delivery details
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  pickupTime        DateTime?
  dispatchTime      DateTime?
  deliveryNotes     String?

  // Agent details
  agentName         String?
  agentPhone        String?
  vehicleInfo       String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  deliveryPhotos DeliveryPhoto[]

  @@map("deliveries")
}

model DeliveryPhoto {
  id          String   @id @default(cuid())
  deliveryId  String
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  photoUrl    String
  cloudinaryPublicId String?
  caption     String?
  photoType   DeliveryPhotoType @default(DELIVERY_PROOF)
  createdAt   DateTime @default(now())

  @@map("delivery_photos")
}

enum DeliveryPhotoType {
  DELIVERY_PROOF
  DAMAGE_REPORT
  CUSTOMER_SATISFACTION
  PICKUP_CONFIRMATION
}

model DeliveryVoucher {
  id              String      @id @default(cuid())
  code            String      @unique
  name            String?
  description     String?
  discountType    VoucherType
  discountValue   Float
  minOrderAmount  Float       @default(0)
  maxUses         Int         @default(1)
  usedCount       Int         @default(0)
  expiresAt       DateTime?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("delivery_vouchers")
}
model DeliveryFee {
  id          String   @id @default(uuid())
  name        String
  amount      Float
  description String?
  isDefault   Boolean  @default(false)
  zones       String[] // PostgreSQL supports array fields natively
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  phoneNumber     String?
  transactionCode String?
  mpesaMessage    String?
  description     String?
  referenceNumber String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model PaymentApprovalLog {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  approverId String
  approver  User     @relation(fields: [approverId], references: [id])
  action    String
  notes     String?
  createdAt DateTime @default(now())

  @@map("payment_approval_logs")
}

model Voucher {
  id              String      @id @default(cuid())
  code            String      @unique
  name            String?
  description     String?
  discountType    VoucherType
  discountValue   Float
  minOrderAmount  Float       @default(0)
  maxDiscountAmount Float?
  validFrom       DateTime
  validUntil      DateTime
  maxUses         Int         @default(1)
  usedCount       Int         @default(0)
  isActive        Boolean     @default(true)

  // Creator info
  createdById     String
  createdBy       User        @relation(fields: [createdById], references: [id])

  // Usage restrictions
  applicableRoles UserRole[]
  applicableProductTypes ProductType[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("vouchers")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  images    String[]
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes     ReviewLike[]
  replies   ReviewReply[]

  @@unique([productId, userId])
  @@map("reviews")
}

model ReviewLike {
  id       String @id @default(cuid())
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
  @@map("review_likes")
}

model ReviewReply {
  id       String @id @default(cuid())
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  comment  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_replies")
}

model HatchingRequest {
  id          String            @id @default(cuid())
  customerId  String
  customer    User              @relation(fields: [customerId], references: [id])
  eggType     String
  quantity    Int
  purpose     String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("hatching_requests")
}

model Application {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestedRole UserRole
  businessName String?
  businessType String?
  description String?
  documents   String[]
  status      ApplicationStatus @default(PENDING)
  reviewedAt  DateTime?
  reviewedBy  String?
  reviewNotes String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("applications")
}

model Sponsorship {
  id          String            @id @default(cuid())
  companyId   String
  sellerId    String?
  userId      String?
  amount      Float
  description String
  terms       String?
  duration    Int?
  benefits    String[]
  status      SponsorshipStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  company User @relation("CompanySponsorships", fields: [companyId], references: [id], onDelete: Cascade)
  seller  User? @relation("SellerSponsorships", fields: [sellerId], references: [id], onDelete: SetNull)
  user    User? @relation("UserSponsorships", fields: [userId], references: [id])

  applications SponsorshipApplication[]

  @@map("sponsorships")
  User User[] @relation("SponsorshipReceiver")
}

model SponsorshipApplication {
  id              String                      @id @default(cuid())
  sponsorshipId   String
  sellerId        String
  message         String?
  businessDetails Json?
  status          SponsorshipApplicationStatus @default(PENDING)
  rejectionReason String?
  reviewedAt      DateTime?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt

  sponsorship Sponsorship @relation(fields: [sponsorshipId], references: [id], onDelete: Cascade)
  seller      User        @relation("SellerSponsorshipApplications", fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sponsorshipId, sellerId])
  @@map("sponsorship_applications")
}

model UserTag {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  tag     TagType
  addedBy String?
  addedAt DateTime @default(now())

  @@unique([userId, tag])
  @@map("user_tags")
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime @default(now())

  totalSales    Float    @default(0)
  orderCount    Int      @default(0)
  productViews  Int      @default(0)
  fulfillmentRate Float  @default(0)
  averageRating   Float  @default(0)

  @@unique([userId, date])
  @@map("analytics")
}

model Notification {
  id         String           @id @default(cuid())
  senderId   String?
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  orderId    String?
  order      Order?           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type       NotificationType
  title      String
  message    String
  isRead     Boolean          @default(false)
  sentAt     DateTime?
  createdAt  DateTime         @default(now())

  @@map("notifications")
}

model ProductLike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("product_likes")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

model Chat {
  id             String   @id @default(cuid())
  participant1Id String
  participant1   User     @relation("ChatParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2Id String
  participant2   User     @relation("ChatParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  productId      String?
  product        Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  orderId        String?
  order          Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  lastMessage    String?
  lastMessageAt  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  messages ChatMessage[]

  @@unique([participant1Id, participant2Id, productId])
  @@unique([participant1Id, participant2Id, orderId])
  @@map("chats")
}

model ChatMessage {
  id            String   @id @default(cuid())
  chatId        String
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId      String
  sender        User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content       String
  type          String   @default("text") // text, image, file
  images        String[]
  files         String[]
  isRead        Boolean  @default(false)
  isEdited      Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  deletedAt     DateTime?
  editedAt      DateTime?
  replyToId     String?
  replyTo       ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies       ChatMessage[] @relation("MessageReplies")
  readAt        DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("chat_messages")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Collection {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           String     @id @default(cuid())
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Invoice {
  id              String   @id @default(cuid())
  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  invoiceNumber   String   @unique
  fileName        String
  filePath        String
  cloudinaryPublicId String?
  generatedAt     DateTime @default(now())

  @@map("invoices")
}

model Announcement {
  id              String            @id @default(cuid())
  title           String
  content         String
  type            AnnouncementType
  status          AnnouncementStatus @default(DRAFT)
  authorId        String
  author          User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Optional associations
  productId       String?
  product         Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Audience targeting
  targetRoles     String[]          // JSON array of roles to target
  isGlobal        Boolean           @default(false) // Visible to all users
  
  // Scheduling
  publishAt       DateTime?         // When to auto-publish
  expiresAt       DateTime?         // When announcement expires
  
  // Media
  imageUrl        String?
  attachmentUrl   String?
  
  // Stats
  viewCount       Int               @default(0)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  publishedAt     DateTime?

  // Relations
  views           AnnouncementView[]
  reactions       AnnouncementReaction[]

  @@map("announcements")
}

model AnnouncementView {
  id             String       @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewedAt       DateTime     @default(now())

  @@unique([announcementId, userId])
  @@map("announcement_views")
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction       String       // 👍, 👎, ❤️, 😮, 😂, etc.
  createdAt      DateTime     @default(now())

  @@unique([announcementId, userId])
  @@map("announcement_reactions")
}